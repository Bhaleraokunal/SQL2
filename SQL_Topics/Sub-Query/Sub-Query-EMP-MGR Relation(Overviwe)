# SQL Subqueries: Theory and Practice

## Overview
This repository contains comprehensive SQL subquery exercises demonstrating advanced database querying techniques using the classic EMP-DEPT schema. The exercises showcase real-world scenarios for hierarchical data relationships and complex data retrieval patterns.

## What are Subqueries?

A **subquery** (also called an inner query or nested query) is a SQL query embedded within another SQL query. Subqueries are powerful tools that allow you to:
- Retrieve data based on results from another query
- Perform complex filtering and data manipulation
- Handle hierarchical relationships in databases
- Create dynamic conditions for data retrieval

### Basic Syntax
```sql
SELECT column_name
FROM table_name
WHERE column_name OPERATOR (SELECT column_name FROM table_name WHERE condition);
```

## Types of Subqueries

### 1. Single Row Subqueries
Return exactly one row and use operators like `=`, `!=`, `<`, `>`, etc.
```sql
SELECT ename FROM emp WHERE sal > (SELECT sal FROM emp WHERE ename = 'SMITH');
```

### 2. Multiple Row Subqueries  
Return multiple rows and use operators like `IN`, `ANY`, `ALL`, `EXISTS`.
```sql
SELECT ename FROM emp WHERE deptno IN (SELECT deptno FROM dept WHERE loc = 'CHICAGO');
```

### 3. Multiple Column Subqueries
Return multiple columns for comparison.
```sql
SELECT * FROM emp WHERE (job, deptno) IN (SELECT job, deptno FROM emp WHERE ename = 'SMITH');
```

### 4. Correlated Subqueries
Reference columns from the outer query, executing once for each row.
```sql
SELECT e1.ename FROM emp e1 WHERE sal > (SELECT AVG(sal) FROM emp e2 WHERE e2.deptno = e1.deptno);
```

## Database Schema Used

### EMP Table Structure
- **EMPNO**: Employee Number (Primary Key)
- **ENAME**: Employee Name  
- **JOB**: Job Title/Position
- **MGR**: Manager's Employee Number (Foreign Key to EMPNO)
- **HIREDATE**: Date of Hiring
- **SAL**: Monthly Salary
- **COMM**: Commission (for sales roles)
- **DEPTNO**: Department Number (Foreign Key)

### DEPT Table Structure
- **DEPTNO**: Department Number (Primary Key)
- **DNAME**: Department Name
- **LOC**: Location

### Sample Data Hierarchy
```
KING (President)
├── JONES (Manager - Research)  
│   ├── SCOTT (Analyst)
│   └── FORD (Analyst)
│       └── SMITH (Clerk)
├── BLAKE (Manager - Sales)
│   ├── ALLEN (Salesman)
│   ├── WARD (Salesman)  
│   ├── MARTIN (Salesman)
│   ├── TURNER (Salesman)
│   └── JAMES (Clerk)
└── CLARK (Manager - Accounting)
    └── MILLER (Clerk)
```

## Practical Applications Covered

### 1. Department-Based Queries
Finding employees, salaries, and details based on department criteria:
- Employees in specific departments
- Department locations and employee distributions
- Salary analysis by department

### 2. Hierarchical Relationship Queries  
Managing employee-manager relationships:
- Finding managers of employees
- Multi-level manager hierarchies (manager's manager)
- Reporting structure analysis
- Team size calculations

### 3. Conditional Data Retrieval
Complex filtering based on business logic:
- Salary comparisons between employees
- Commission-based filtering
- Date-based hiring analysis
- Pattern matching in names

### 4. Aggregate Functions with Subqueries
Statistical analysis using nested queries:
- Maximum/minimum salary queries
- Average salary calculations
- Department-wise totals
- Employee count analysis

## Key Learning Outcomes

### Technical Skills Developed
1. **Nested Query Construction**: Building multi-level subqueries for complex data retrieval
2. **Join Logic Understanding**: Implicit joins through subqueries vs explicit JOIN operations  
3. **Performance Optimization**: Understanding when to use subqueries vs joins
4. **Data Relationship Modeling**: Working with hierarchical and relational data structures

### Problem-Solving Approaches
1. **Decomposition**: Breaking complex queries into smaller, manageable subqueries
2. **Logical Thinking**: Understanding data flow and dependency relationships
3. **Debugging**: Identifying and fixing syntax errors in nested structures
4. **Optimization**: Writing efficient queries for better performance

## Real-World Applications

### Human Resources Management
- Finding reporting managers for employees
- Calculating department-wise salary budgets  
- Identifying promotion candidates based on tenure and performance

### Business Intelligence
- Analyzing sales team performance (commission-based filtering)
- Department location analysis for resource allocation
- Salary benchmarking and compensation analysis

### Data Analysis
- Employee distribution across departments and locations
- Hierarchical reporting structure analysis
- Statistical analysis of employee data

## Best Practices Demonstrated

### Query Writing Standards
1. **Readable Formatting**: Proper indentation and line breaks
2. **Logical Structure**: Inner-to-outer query logic flow
3. **Error Handling**: Graceful handling of NULL values and missing data
4. **Performance Considerations**: Efficient subquery design

### Debugging Techniques
1. **Incremental Development**: Testing inner queries before nesting
2. **Result Verification**: Comparing expected vs actual results
3. **Syntax Validation**: Proper use of parentheses and operators
4. **Edge Case Testing**: Handling empty results and boundary conditions

## Conclusion

Subqueries are essential tools in SQL that enable sophisticated data analysis and retrieval. This practice set demonstrates their practical application in real-world scenarios, particularly in managing hierarchical organizational data. The exercises progress from simple single-table queries to complex multi-level nested queries, providing a comprehensive foundation for advanced SQL development.

The combination of department management and employee hierarchy scenarios makes this an ideal learning resource for understanding how databases model real organizational structures and how SQL can be used to extract meaningful insights from such data.

## Repository Structure
- **Sub Query Case 1**: Basic department and location-based queries
- **Sub Query Case 2**: Employee-manager relationship queries  
- **Clean Solutions**: Optimized and documented query solutions
- **Theory Documentation**: This comprehensive guide

---
*This project demonstrates practical SQL skills essential for database development, business intelligence, and data analysis roles.*
